
sensormodul.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000da  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         000006cc  00000000  00000000  00000130  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000085  00000000  00000000  000007fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_aranges 00000080  00000000  00000000  00000888  2**3
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000424  00000000  00000000  00000908  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000143  00000000  00000000  00000d2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000346  00000000  00000000  00000e6f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000034  00000000  00000000  000011b8  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000000f5  00000000  00000000  000011ec  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea ed       	ldi	r30, 0xDA	; 218
  68:	f0 e0       	ldi	r31, 0x00	; 0
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 36       	cpi	r26, 0x60	; 96
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 51 00 	call	0xa2	; 0xa2 <main>
  8a:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <init_spi>:
}


void init_spi()
{
	setbit(SPCR, SPE);		//Enables spi
  92:	6e 9a       	sbi	0x0d, 6	; 13
	clearbit(DDRB, PINB4);	// SS är input
  94:	bc 98       	cbi	0x17, 4	; 23
	clearbit(DDRB, PINB5);	// MOSI är input
  96:	bd 98       	cbi	0x17, 5	; 23
	setbit(DDRB, PINB6);	// MISO är output
  98:	be 9a       	sbi	0x17, 6	; 23
	clearbit(DDRB, PINB7);	//CLK är input
  9a:	bf 98       	cbi	0x17, 7	; 23
	setbit(DDRA, PINA7);	// Avbrottsförfrågan är output
  9c:	d7 9a       	sbi	0x1a, 7	; 26
	setbit(PORTA, PINA7);	// 1 = normal, 0 = avbrottsförfrågan
  9e:	df 9a       	sbi	0x1b, 7	; 27
}
  a0:	08 95       	ret

000000a2 <main>:
#include "bitmacros.h"


int main(void)
{
	DDRA = 0xff;
  a2:	8f ef       	ldi	r24, 0xFF	; 255
  a4:	8a bb       	out	0x1a, r24	; 26
	init_spi();
  a6:	0e 94 49 00 	call	0x92	; 0x92 <init_spi>
	
    while(1)
    {
		//TEST
		_delay_ms(1000);
		PORTA = 0xff;
  aa:	8f ef       	ldi	r24, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ac:	2f ef       	ldi	r18, 0xFF	; 255
  ae:	39 e6       	ldi	r19, 0x69	; 105
  b0:	48 e1       	ldi	r20, 0x18	; 24
  b2:	21 50       	subi	r18, 0x01	; 1
  b4:	30 40       	sbci	r19, 0x00	; 0
  b6:	40 40       	sbci	r20, 0x00	; 0
  b8:	e1 f7       	brne	.-8      	; 0xb2 <main+0x10>
  ba:	00 c0       	rjmp	.+0      	; 0xbc <main+0x1a>
  bc:	00 00       	nop
  be:	8b bb       	out	0x1b, r24	; 27
  c0:	2f ef       	ldi	r18, 0xFF	; 255
  c2:	39 e6       	ldi	r19, 0x69	; 105
  c4:	48 e1       	ldi	r20, 0x18	; 24
  c6:	21 50       	subi	r18, 0x01	; 1
  c8:	30 40       	sbci	r19, 0x00	; 0
  ca:	40 40       	sbci	r20, 0x00	; 0
  cc:	e1 f7       	brne	.-8      	; 0xc6 <main+0x24>
  ce:	00 c0       	rjmp	.+0      	; 0xd0 <main+0x2e>
  d0:	00 00       	nop
		_delay_ms(1000);
		PORTA = 0x00;
  d2:	1b ba       	out	0x1b, r1	; 27
  d4:	eb cf       	rjmp	.-42     	; 0xac <main+0xa>

000000d6 <_exit>:
  d6:	f8 94       	cli

000000d8 <__stop_program>:
  d8:	ff cf       	rjmp	.-2      	; 0xd8 <__stop_program>
