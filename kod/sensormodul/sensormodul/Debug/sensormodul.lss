
sensormodul.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000d8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         000006cc  00000000  00000000  0000012c  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000085  00000000  00000000  000007f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_aranges 00000080  00000000  00000000  00000880  2**3
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000003b2  00000000  00000000  00000900  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000000d9  00000000  00000000  00000cb2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000029c  00000000  00000000  00000d8b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000074  00000000  00000000  00001028  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000000c7  00000000  00000000  0000109c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000022  00000000  00000000  00001163  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 ed       	ldi	r30, 0xD8	; 216
  68:	f0 e0       	ldi	r31, 0x00	; 0
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 36       	cpi	r26, 0x60	; 96
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 54 00 	call	0xa8	; 0xa8 <main>
  8a:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <init_spi>:
}


void init_spi()
{
	sei();
  92:	78 94       	sei
	setbit(SPCR, SPE);		//Enables spi
  94:	6e 9a       	sbi	0x0d, 6	; 13
	clearbit(DDRB, PINB4);	// SS är input
  96:	bc 98       	cbi	0x17, 4	; 23
	clearbit(DDRB, PINB5);	// MOSI är input
  98:	bd 98       	cbi	0x17, 5	; 23
	setbit(DDRB, PINB6);	// MISO är output
  9a:	be 9a       	sbi	0x17, 6	; 23
	clearbit(DDRB, PINB7);	//CLK är input
  9c:	bf 98       	cbi	0x17, 7	; 23
	setbit(DDRA, PINA7);	// Avbrottsförfrågan är output
  9e:	d7 9a       	sbi	0x1a, 7	; 26
	setbit(PORTA, PINA7);	// 1 = normal, 0 = avbrottsförfrågan
  a0:	df 9a       	sbi	0x1b, 7	; 27
}
  a2:	08 95       	ret

000000a4 <init_adc>:

void init_adc()
{
	setbit(ADCSRA,ADEN);
  a4:	37 9a       	sbi	0x06, 7	; 6
}
  a6:	08 95       	ret

000000a8 <main>:
uint8_t read_ir(uint8_t sensor_no);
uint8_t read_gyro();
void init_adc();
int main(void)
{
	DDRA = 0b10000000;
  a8:	80 e8       	ldi	r24, 0x80	; 128
  aa:	8a bb       	out	0x1a, r24	; 26
	DDRD = 0xFF;
  ac:	8f ef       	ldi	r24, 0xFF	; 255
  ae:	81 bb       	out	0x11, r24	; 17
	init_spi();
  b0:	0e 94 49 00 	call	0x92	; 0x92 <init_spi>
	init_adc();
  b4:	0e 94 52 00 	call	0xa4	; 0xa4 <init_adc>
  b8:	ff cf       	rjmp	.-2      	; 0xb8 <main+0x10>

000000ba <read_adc>:
	return read_adc();
}

uint8_t read_adc()
{
	setbit(ADCSRA,ADSC); //start_reading
  ba:	36 9a       	sbi	0x06, 6	; 6
  bc:	ff cf       	rjmp	.-2      	; 0xbc <read_adc+0x2>

000000be <read_ir>:
	ADMUX = 0b00000010;
	return read_adc();
}	
uint8_t read_ir(uint8_t sensor_no)
{
	ADMUX = 0x00;
  be:	17 b8       	out	0x07, r1	; 7
	sensor_no = sensor_no << 4;
  c0:	82 95       	swap	r24
  c2:	80 7f       	andi	r24, 0xF0	; 240
	PORTD = 0b01110000 & sensor_no; //Tell mux where to read from
  c4:	80 77       	andi	r24, 0x70	; 112
  c6:	82 bb       	out	0x12, r24	; 18
	return read_adc();
  c8:	0e 94 5d 00 	call	0xba	; 0xba <read_adc>

000000cc <read_gyro>:
}


uint8_t read_gyro()
{
	ADMUX = 0b00000010;
  cc:	82 e0       	ldi	r24, 0x02	; 2
  ce:	87 b9       	out	0x07, r24	; 7
	return read_adc();
  d0:	0e 94 5d 00 	call	0xba	; 0xba <read_adc>

000000d4 <_exit>:
  d4:	f8 94       	cli

000000d6 <__stop_program>:
  d6:	ff cf       	rjmp	.-2      	; 0xd6 <__stop_program>
