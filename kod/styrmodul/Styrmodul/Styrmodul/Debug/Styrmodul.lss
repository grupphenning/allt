
Styrmodul.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001fc  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         000006cc  00000000  00000000  00000250  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000085  00000000  00000000  0000091c  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_aranges 00000080  00000000  00000000  000009a8  2**3
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000057a  00000000  00000000  00000a28  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000016b  00000000  00000000  00000fa2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000387  00000000  00000000  0000110d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000000b4  00000000  00000000  00001494  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000164  00000000  00000000  00001548  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ec ef       	ldi	r30, 0xFC	; 252
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 30       	cpi	r26, 0x00	; 0
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	11 e0       	ldi	r17, 0x01	; 1
  b4:	a0 e0       	ldi	r26, 0x00	; 0
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a0 30       	cpi	r26, 0x00	; 0
  be:	b1 07       	cpc	r27, r17
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	0e 94 7a 00 	call	0xf4	; 0xf4 <main>
  c6:	0c 94 fc 00 	jmp	0x1f8	; 0x1f8 <_exit>

000000ca <__bad_interrupt>:
  ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <drive_forwards>:
}


void drive_forwards(uint8_t amount)
{
	LEFT_AMOUNT = amount;
  ce:	80 93 b3 00 	sts	0x00B3, r24
	RIGHT_AMOUNT = amount;
  d2:	80 93 b4 00 	sts	0x00B4, r24
	
	//sätt ettor (framåt) på DIR-pinnarna
	setbit(PORT_DIR, LEFT_DIR);
  d6:	29 9a       	sbi	0x05, 1	; 5
	setbit(PORT_DIR, RIGHT_DIR);
  d8:	28 9a       	sbi	0x05, 0	; 5
}
  da:	08 95       	ret

000000dc <stop_motors>:
	//clearbit(TCCR2B, CS20);
	//clearbit(TCCR2B, CS21);
	//clearbit(TCCR2B, CS22);
	//LEFT_PWM = 0;
	//RIGHT_PWM = 0;
	LEFT_AMOUNT = 0;
  dc:	10 92 b3 00 	sts	0x00B3, r1
	RIGHT_AMOUNT = 0;
  e0:	10 92 b4 00 	sts	0x00B4, r1
}
  e4:	08 95       	ret

000000e6 <claw_in>:
	CLAW_AMOUNT = 0;
}

void claw_in()
{
	CLAW_AMOUNT = 200;
  e6:	88 ec       	ldi	r24, 0xC8	; 200
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	90 93 89 00 	sts	0x0089, r25
  ee:	80 93 88 00 	sts	0x0088, r24
  f2:	08 95       	ret

000000f4 <main>:



int main(void)
{
	DDRA = 0xFF;
  f4:	8f ef       	ldi	r24, 0xFF	; 255
  f6:	81 b9       	out	0x01, r24	; 1
	DDRB = 0xFF;
  f8:	84 b9       	out	0x04, r24	; 4
	DDRC = 0xFF;
  fa:	87 b9       	out	0x07, r24	; 7
	DDRD = 0xFF;	
  fc:	8a b9       	out	0x0a, r24	; 10
	//pwm-styrning för gripklon, pin OC1A, register OCR1A
	TCCR1A = 0;
  fe:	e0 e8       	ldi	r30, 0x80	; 128
 100:	f0 e0       	ldi	r31, 0x00	; 0
 102:	10 82       	st	Z, r1
	setbit(TCCR1A, COM1A1);
 104:	80 81       	ld	r24, Z
 106:	80 68       	ori	r24, 0x80	; 128
 108:	80 83       	st	Z, r24
	setbit(TCCR1A, WGM11);
 10a:	80 81       	ld	r24, Z
 10c:	82 60       	ori	r24, 0x02	; 2
 10e:	80 83       	st	Z, r24
	
	TCCR1B = 0;
 110:	e1 e8       	ldi	r30, 0x81	; 129
 112:	f0 e0       	ldi	r31, 0x00	; 0
 114:	10 82       	st	Z, r1
	setbit(TCCR1B, WGM11);
 116:	80 81       	ld	r24, Z
 118:	82 60       	ori	r24, 0x02	; 2
 11a:	80 83       	st	Z, r24
	setbit(TCCR1B, WGM12);
 11c:	80 81       	ld	r24, Z
 11e:	88 60       	ori	r24, 0x08	; 8
 120:	80 83       	st	Z, r24
	setbit(TCCR1B, WGM13);
 122:	80 81       	ld	r24, Z
 124:	80 61       	ori	r24, 0x10	; 16
 126:	80 83       	st	Z, r24
	
	//sätt klockan, fc = f/1024
	setbit(TCCR1B, CS10);
 128:	80 81       	ld	r24, Z
 12a:	81 60       	ori	r24, 0x01	; 1
 12c:	80 83       	st	Z, r24
	//setbit(TCCR1B, CS12);
	
	
	//TCCR1A = (1 << COM1A1) | (1 << WGM11);
	//TCCR1B = (1 << WGM11) | (1 << WGM13) | (1 << WGM12) | (1 << CS12) | (1 << CS10);
	TIMSK1 = (1 << OCIE1A);  // Enable Interrupt TimerCounter1 Compare Match A (TIMER1_COMPA_vect)
 12e:	22 e0       	ldi	r18, 0x02	; 2
 130:	20 93 6f 00 	sts	0x006F, r18
	ICR1 = 390;
 134:	86 e8       	ldi	r24, 0x86	; 134
 136:	91 e0       	ldi	r25, 0x01	; 1
 138:	90 93 87 00 	sts	0x0087, r25
 13c:	80 93 86 00 	sts	0x0086, r24
	//sätt OCR1A också!
	OCR1A = 200;
 140:	88 ec       	ldi	r24, 0xC8	; 200
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	90 93 89 00 	sts	0x0089, r25
 148:	80 93 88 00 	sts	0x0088, r24
	
	//pwm-styrning för motorerna, pinne OC2A, register OCR2A för vänster, pinne OC2B, register OCR2B för höger.
	//PB1 DIR höger, PB0 vänster
	TCCR2A=0;
 14c:	e0 eb       	ldi	r30, 0xB0	; 176
 14e:	f0 e0       	ldi	r31, 0x00	; 0
 150:	10 82       	st	Z, r1
	setbit(TCCR2A, COM2A1);
 152:	80 81       	ld	r24, Z
 154:	80 68       	ori	r24, 0x80	; 128
 156:	80 83       	st	Z, r24
	setbit(TCCR2A, COM2B1);
 158:	80 81       	ld	r24, Z
 15a:	80 62       	ori	r24, 0x20	; 32
 15c:	80 83       	st	Z, r24
	setbit(TCCR2A, WGM20);
 15e:	80 81       	ld	r24, Z
 160:	81 60       	ori	r24, 0x01	; 1
 162:	80 83       	st	Z, r24
	setbit(TCCR2A, WGM21);
 164:	80 81       	ld	r24, Z
 166:	82 60       	ori	r24, 0x02	; 2
 168:	80 83       	st	Z, r24
	OCR2A = 0;
 16a:	10 92 b3 00 	sts	0x00B3, r1
	OCR2B = 0;
 16e:	10 92 b4 00 	sts	0x00B4, r1
	
	//TCCR2A = (1 << COM2A1) | (1 << COM2B1) | (1 << WGM21) | (1 << WGM20);
	
	//sätter på pwm!
	TCCR2B=0;
 172:	e1 eb       	ldi	r30, 0xB1	; 177
 174:	f0 e0       	ldi	r31, 0x00	; 0
 176:	10 82       	st	Z, r1
	setbit(TCCR2B, CS20);
 178:	80 81       	ld	r24, Z
 17a:	81 60       	ori	r24, 0x01	; 1
 17c:	80 83       	st	Z, r24
	//TCCR2B = (1 << CS20);
	TIMSK2 = (1 << OCIE2A);
 17e:	20 93 70 00 	sts	0x0070, r18
	//drive_forwards(90);
	//tank_turn_left(255, 100);
    while(1)
    {
		//claw_out();
		drive_forwards(90);
 182:	8a e5       	ldi	r24, 0x5A	; 90
 184:	90 e0       	ldi	r25, 0x00	; 0
 186:	0e 94 67 00 	call	0xce	; 0xce <drive_forwards>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 18a:	8f e7       	ldi	r24, 0x7F	; 127
 18c:	94 e8       	ldi	r25, 0x84	; 132
 18e:	ae e1       	ldi	r26, 0x1E	; 30
 190:	81 50       	subi	r24, 0x01	; 1
 192:	90 40       	sbci	r25, 0x00	; 0
 194:	a0 40       	sbci	r26, 0x00	; 0
 196:	e1 f7       	brne	.-8      	; 0x190 <main+0x9c>
 198:	00 c0       	rjmp	.+0      	; 0x19a <main+0xa6>
 19a:	00 00       	nop
		_delay_ms(10000);
		claw_in();
 19c:	0e 94 73 00 	call	0xe6	; 0xe6 <claw_in>
		stop_motors();
 1a0:	0e 94 6e 00 	call	0xdc	; 0xdc <stop_motors>
 1a4:	8f e7       	ldi	r24, 0x7F	; 127
 1a6:	94 e8       	ldi	r25, 0x84	; 132
 1a8:	ae e1       	ldi	r26, 0x1E	; 30
 1aa:	81 50       	subi	r24, 0x01	; 1
 1ac:	90 40       	sbci	r25, 0x00	; 0
 1ae:	a0 40       	sbci	r26, 0x00	; 0
 1b0:	e1 f7       	brne	.-8      	; 0x1aa <main+0xb6>
 1b2:	00 c0       	rjmp	.+0      	; 0x1b4 <main+0xc0>
 1b4:	00 00       	nop
 1b6:	e5 cf       	rjmp	.-54     	; 0x182 <main+0x8e>

000001b8 <drive_backwards>:
	setbit(PORT_DIR, RIGHT_DIR);
}

void drive_backwards(uint8_t amount)
{
	LEFT_AMOUNT = amount;
 1b8:	80 93 b3 00 	sts	0x00B3, r24
	RIGHT_AMOUNT = amount;
 1bc:	80 93 b4 00 	sts	0x00B4, r24
	
	//sätt nollor (bakåt) på DIR-pinnarna
	clearbit(PORT_DIR, LEFT_DIR);
 1c0:	29 98       	cbi	0x05, 1	; 5
	clearbit(PORT_DIR, RIGHT_DIR);
 1c2:	28 98       	cbi	0x05, 0	; 5
}
 1c4:	08 95       	ret

000001c6 <turn_left>:

//sväng vänster!
void turn_left(uint8_t amount)
{
	LEFT_AMOUNT = amount;
 1c6:	80 93 b3 00 	sts	0x00B3, r24
}
 1ca:	08 95       	ret

000001cc <turn_right>:

//sväng höger!
void turn_right(uint8_t amount)
{
	RIGHT_AMOUNT = amount;
 1cc:	80 93 b4 00 	sts	0x00B4, r24
}
 1d0:	08 95       	ret

000001d2 <tank_turn_left>:
}

//sväng vänster som en stridsvagn!
void tank_turn_left(uint8_t amount_l, uint8_t amount_h)
{
	LEFT_AMOUNT = amount_l;
 1d2:	80 93 b3 00 	sts	0x00B3, r24
	RIGHT_AMOUNT = amount_h;
 1d6:	60 93 b4 00 	sts	0x00B4, r22
	
	clearbit(PORT_DIR, LEFT_DIR);
 1da:	29 98       	cbi	0x05, 1	; 5
	setbit(PORT_DIR, RIGHT_DIR);
 1dc:	28 9a       	sbi	0x05, 0	; 5
}
 1de:	08 95       	ret

000001e0 <tank_turn_right>:


//sväng höger som en stridsvagn!
void tank_turn_right(uint8_t amount)
{
	LEFT_AMOUNT = amount;
 1e0:	80 93 b3 00 	sts	0x00B3, r24
	RIGHT_AMOUNT = amount;
 1e4:	80 93 b4 00 	sts	0x00B4, r24
	
	setbit(PORT_DIR, LEFT_DIR);
 1e8:	29 9a       	sbi	0x05, 1	; 5
	clearbit(PORT_DIR, RIGHT_DIR);
 1ea:	28 98       	cbi	0x05, 0	; 5
}
 1ec:	08 95       	ret

000001ee <claw_out>:

void claw_out()
{
	CLAW_AMOUNT = 0;
 1ee:	10 92 89 00 	sts	0x0089, r1
 1f2:	10 92 88 00 	sts	0x0088, r1
}
 1f6:	08 95       	ret

000001f8 <_exit>:
 1f8:	f8 94       	cli

000001fa <__stop_program>:
 1fa:	ff cf       	rjmp	.-2      	; 0x1fa <__stop_program>
