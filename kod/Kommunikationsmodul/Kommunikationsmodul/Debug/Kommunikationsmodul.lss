
Kommunikationsmodul.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001a8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  000001a8  0000023c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  00800062  00800062  0000023e  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00000240  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  0000090c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000080  00000000  00000000  00000998  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000005c8  00000000  00000000  00000a18  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000195  00000000  00000000  00000fe0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002fc  00000000  00000000  00001175  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000014c  00000000  00000000  00001474  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000235  00000000  00000000  000015c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000010d  00000000  00000000  000017f5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 ea       	ldi	r30, 0xA8	; 168
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 36       	cpi	r26, 0x62	; 98
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a2 e6       	ldi	r26, 0x62	; 98
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a8 36       	cpi	r26, 0x68	; 104
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 7a 00 	call	0xf4	; 0xf4 <main>
  8a:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <init_spi>:
}


void init_spi()
{
	setbit(SPCR, SPE);		//Enables spi
  92:	6e 9a       	sbi	0x0d, 6	; 13
	//SPCR = 0;
	clearbit(DDRB, PINB4);	// SS är input
  94:	bc 98       	cbi	0x17, 4	; 23
	clearbit(DDRB, PINB5);	// MOSI är input
  96:	bd 98       	cbi	0x17, 5	; 23
	setbit(DDRB, PINB6);	// MISO är output
  98:	be 9a       	sbi	0x17, 6	; 23
	clearbit(DDRB, PINB7);	//CLK är input
  9a:	bf 98       	cbi	0x17, 7	; 23
	setbit(DDRA, PINA7);	// Avbrottsförfrågan är output
  9c:	d7 9a       	sbi	0x1a, 7	; 26
	setbit(PORTA, PINA7);	// 1 = normal, 0 = avbrottsförfrågan
  9e:	df 9a       	sbi	0x1b, 7	; 27
	//setbit(SPCR, SPE);		//Enables spi
	//setbit(SPCR,SPIE);		//Enable interupt
	//setbit(SPCR,SPR0);		//FCK/16
	//setbit(SPCR,SPR1);		
	
}
  a0:	08 95       	ret

000000a2 <init_firefly>:

void init_firefly()
{
	setbit(PORTD, PIND1);
  a2:	91 9a       	sbi	0x12, 1	; 18
	UBRRL = BAUD_PRESCALE;			// De minst signifikanta bitarna av baud scale
  a4:	83 e3       	ldi	r24, 0x33	; 51
  a6:	89 b9       	out	0x09, r24	; 9
	UBRRH = (BAUD_PRESCALE >> 8);	// De mest signifikanta bitarna
  a8:	10 bc       	out	0x20, r1	; 32
	UCSRB = ((1<<TXEN) | (1<<RXEN)); //RXCIE för att enejjbla avbrott
  aa:	88 e1       	ldi	r24, 0x18	; 24
  ac:	8a b9       	out	0x0a, r24	; 10
}
  ae:	08 95       	ret

000000b0 <decode_spi_from_master>:
	send_to_master(commando);
}

void decode_spi_from_master()
{
	if (spi_data_from_master = drive_turn_left_request)
  b0:	80 91 63 00 	lds	r24, 0x0063
  b4:	80 93 66 00 	sts	0x0066, r24
	}
	else if (spi_data_from_master = drive_turn_left_request)
	{
		
	}
}
  b8:	08 95       	ret

000000ba <SPI_SlaveReceive>:

uint8_t SPI_SlaveReceive()
{
	//SPDR = 0x32;
	/* Wait for reception complete */
	setbit(PORTB, PB1);
  ba:	c1 9a       	sbi	0x18, 1	; 24
	
	while(!(SPSR & (1<<SPIF)));
  bc:	77 9b       	sbis	0x0e, 7	; 14
  be:	fe cf       	rjmp	.-4      	; 0xbc <SPI_SlaveReceive+0x2>
	clearbit(PORTB, PB1);
  c0:	c1 98       	cbi	0x18, 1	; 24
	/* Return data register */
	return SPDR;
  c2:	8f b1       	in	r24, 0x0f	; 15
}
  c4:	08 95       	ret

000000c6 <SPI_read_byte>:
uint8_t spi_data_from_master;
uint8_t spi_data_to_master;

void SPI_read_byte()
{
	PORTA = SPDR;	// Bra för felsökning!
  c6:	8f b1       	in	r24, 0x0f	; 15
  c8:	8b bb       	out	0x1b, r24	; 27
	spi_data_from_master = SPDR;
  ca:	8f b1       	in	r24, 0x0f	; 15
  cc:	80 93 66 00 	sts	0x0066, r24
}
  d0:	08 95       	ret

000000d2 <SPI_write_byte>:


void SPI_write_byte(uint8_t byte)
{
	SPDR = byte;
  d2:	8f b9       	out	0x0f, r24	; 15
}
  d4:	08 95       	ret

000000d6 <serial_send_byte>:
	UCSRB = ((1<<TXEN) | (1<<RXEN)); //RXCIE för att enejjbla avbrott
}

void serial_send_byte(uint8_t val)
{
	while((UCSRA &(1<<UDRE)) == 0);	// Vänta på att föregående värde redan skickats
  d6:	5d 9b       	sbis	0x0b, 5	; 11
  d8:	fe cf       	rjmp	.-4      	; 0xd6 <serial_send_byte>
	UDR = val;
  da:	8c b9       	out	0x0c, r24	; 12
}
  dc:	08 95       	ret

000000de <USART_Init>:

void USART_Init(unsigned int baud)
{
	//Set baud rate
	UBRRH = (unsigned char)(baud>>8);
  de:	90 bd       	out	0x20, r25	; 32
	UBRRL = (unsigned char)baud;
  e0:	89 b9       	out	0x09, r24	; 9
	
	//Enable reciever and transmitter
	UCSRB = (1<<RXEN)|(1<<TXEN);
  e2:	88 e1       	ldi	r24, 0x18	; 24
  e4:	8a b9       	out	0x0a, r24	; 10
	
	//Set frame format: 8data, 2stop bit
	UCSRC = (1<<URSEL)|(1<<USBS)|(3<<UCSZ0);
  e6:	8e e8       	ldi	r24, 0x8E	; 142
  e8:	80 bd       	out	0x20, r24	; 32
}
  ea:	08 95       	ret

000000ec <USART_Transmit>:

void USART_Transmit(unsigned char data)
{
	//Wait for empty transmit buffer
	while(!(UCSRA & (1<<UDRE)));
  ec:	5d 9b       	sbis	0x0b, 5	; 11
  ee:	fe cf       	rjmp	.-4      	; 0xec <USART_Transmit>
	
	//Put data into buffer, sends the data
	UDR = data;
  f0:	8c b9       	out	0x0c, r24	; 12
}
  f2:	08 95       	ret

000000f4 <main>:
void USART_Init(unsigned int baud);
void USART_Transmit(unsigned char data);

int main(void)
{
	PORTA = 0;
  f4:	1b ba       	out	0x1b, r1	; 27
	setbit(DDRB, PB1);
  f6:	b9 9a       	sbi	0x17, 1	; 23
	setbit(DDRA, PA7);
  f8:	d7 9a       	sbi	0x1a, 7	; 26
	
	sei(); //Enable global interrupts
  fa:	78 94       	sei

	init_spi();
  fc:	0e 94 49 00 	call	0x92	; 0x92 <init_spi>
	SPDR = 0x32;
 100:	82 e3       	ldi	r24, 0x32	; 50
 102:	8f b9       	out	0x0f, r24	; 15
    init_firefly();
 104:	0e 94 51 00 	call	0xa2	; 0xa2 <init_firefly>
	DDRD = 0xff;
	PORTA = 0xff;
	PORTB = 0xff;*/
	//PORTC = 0xff;
	//PORTD = 0xff;
	USART_Init(9600);
 108:	80 e8       	ldi	r24, 0x80	; 128
 10a:	95 e2       	ldi	r25, 0x25	; 37
 10c:	0e 94 6f 00 	call	0xde	; 0xde <USART_Init>

	
    while(1)
    {
		USART_Transmit('a');
 110:	81 e6       	ldi	r24, 0x61	; 97
 112:	0e 94 76 00 	call	0xec	; 0xec <USART_Transmit>
		//USART_Recieve();
		//clearbit(PORTB, PB0);
		//PORTA = 2;
		//_delay_ms(100);
		//setbit(SPCR, SPE);		//Enables spi
		PORTA = SPI_SlaveReceive();
 116:	0e 94 5d 00 	call	0xba	; 0xba <SPI_SlaveReceive>
 11a:	8b bb       	out	0x1b, r24	; 27
 11c:	f9 cf       	rjmp	.-14     	; 0x110 <main+0x1c>

0000011e <USART_Recieve>:
}

unsigned char USART_Recieve(void)
{
	//Wait for data to be recieved
	while(!(UCSRA & (1<<RXC)));
 11e:	5f 9b       	sbis	0x0b, 7	; 11
 120:	fe cf       	rjmp	.-4      	; 0x11e <USART_Recieve>
	
	//Get and return recieved data from buffer
	return UDR;
 122:	8c b1       	in	r24, 0x0c	; 12
}
 124:	08 95       	ret

00000126 <SPI_STC_vect>:

ISR(SPI_STC_vect)
{
 126:	1f 92       	push	r1
 128:	0f 92       	push	r0
 12a:	0f b6       	in	r0, 0x3f	; 63
 12c:	0f 92       	push	r0
 12e:	11 24       	eor	r1, r1
 130:	2f 93       	push	r18
 132:	3f 93       	push	r19
 134:	4f 93       	push	r20
 136:	5f 93       	push	r21
 138:	6f 93       	push	r22
 13a:	7f 93       	push	r23
 13c:	8f 93       	push	r24
 13e:	9f 93       	push	r25
 140:	af 93       	push	r26
 142:	bf 93       	push	r27
 144:	ef 93       	push	r30
 146:	ff 93       	push	r31
	SPI_read_byte();
 148:	0e 94 63 00 	call	0xc6	; 0xc6 <SPI_read_byte>
	decode_spi_from_master();
 14c:	0e 94 58 00 	call	0xb0	; 0xb0 <decode_spi_from_master>
	SPI_write_byte(spi_data_to_master);  //Ska ta något argument!
 150:	80 91 65 00 	lds	r24, 0x0065
 154:	0e 94 69 00 	call	0xd2	; 0xd2 <SPI_write_byte>
}	
 158:	ff 91       	pop	r31
 15a:	ef 91       	pop	r30
 15c:	bf 91       	pop	r27
 15e:	af 91       	pop	r26
 160:	9f 91       	pop	r25
 162:	8f 91       	pop	r24
 164:	7f 91       	pop	r23
 166:	6f 91       	pop	r22
 168:	5f 91       	pop	r21
 16a:	4f 91       	pop	r20
 16c:	3f 91       	pop	r19
 16e:	2f 91       	pop	r18
 170:	0f 90       	pop	r0
 172:	0f be       	out	0x3f, r0	; 63
 174:	0f 90       	pop	r0
 176:	1f 90       	pop	r1
 178:	18 95       	reti

0000017a <create_master_interrupt>:

void create_master_interrupt() 
{
	PORTA |= ~(1 << PINA7);
 17a:	8b b3       	in	r24, 0x1b	; 27
 17c:	8f 67       	ori	r24, 0x7F	; 127
 17e:	8b bb       	out	0x1b, r24	; 27
}
 180:	08 95       	ret

00000182 <send_to_master>:
	}
}

void send_to_master(uint8_t byte)
{
	SPDR = byte;
 182:	8f b9       	out	0x0f, r24	; 15
	create_master_interrupt();
 184:	0e 94 bd 00 	call	0x17a	; 0x17a <create_master_interrupt>
}
 188:	08 95       	ret

0000018a <decode_remote>:

void decode_remote()
{
	uint8_t commando;
	// Programmeras senare då vi vet hur vi får info från fjärr!!!
	if (commando = drive_turn_prot)
 18a:	80 91 60 00 	lds	r24, 0x0060
 18e:	88 23       	and	r24, r24
 190:	29 f0       	breq	.+10     	; 0x19c <decode_remote+0x12>
	{
		// Sparar undan värdet för vänster resp. höger hjulpar!!!
		drive_turn_left_value = 0x00; // OBS!!!! Blajvärde!!!!
 192:	10 92 67 00 	sts	0x0067, r1
		drive_turn_right_value = 0xFF; // OBS!!!! Blajvärde!!!!
 196:	9f ef       	ldi	r25, 0xFF	; 255
 198:	90 93 64 00 	sts	0x0064, r25
	}
	send_to_master(commando);
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	0e 94 c1 00 	call	0x182	; 0x182 <send_to_master>
}
 1a2:	08 95       	ret

000001a4 <_exit>:
 1a4:	f8 94       	cli

000001a6 <__stop_program>:
 1a6:	ff cf       	rjmp	.-2      	; 0x1a6 <__stop_program>
